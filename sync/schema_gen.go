package main

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *NamedSeries) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Timestamps":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Timestamps")
				return
			}
			if cap(z.Timestamps) >= int(zb0002) {
				z.Timestamps = (z.Timestamps)[:zb0002]
			} else {
				z.Timestamps = make([]int64, zb0002)
			}
			for za0001 := range z.Timestamps {
				z.Timestamps[za0001], err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "Timestamps", za0001)
					return
				}
			}
		case "Values":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Values")
				return
			}
			if cap(z.Values) >= int(zb0003) {
				z.Values = (z.Values)[:zb0003]
			} else {
				z.Values = make([]float64, zb0003)
			}
			for za0002 := range z.Values {
				z.Values[za0002], err = dc.ReadFloat64()
				if err != nil {
					err = msgp.WrapError(err, "Values", za0002)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *NamedSeries) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Name"
	err = en.Append(0x83, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "Timestamps"
	err = en.Append(0xaa, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Timestamps)))
	if err != nil {
		err = msgp.WrapError(err, "Timestamps")
		return
	}
	for za0001 := range z.Timestamps {
		err = en.WriteInt64(z.Timestamps[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Timestamps", za0001)
			return
		}
	}
	// write "Values"
	err = en.Append(0xa6, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Values)))
	if err != nil {
		err = msgp.WrapError(err, "Values")
		return
	}
	for za0002 := range z.Values {
		err = en.WriteFloat64(z.Values[za0002])
		if err != nil {
			err = msgp.WrapError(err, "Values", za0002)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *NamedSeries) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Name"
	o = append(o, 0x83, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "Timestamps"
	o = append(o, 0xaa, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Timestamps)))
	for za0001 := range z.Timestamps {
		o = msgp.AppendInt64(o, z.Timestamps[za0001])
	}
	// string "Values"
	o = append(o, 0xa6, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Values)))
	for za0002 := range z.Values {
		o = msgp.AppendFloat64(o, z.Values[za0002])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *NamedSeries) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Timestamps":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Timestamps")
				return
			}
			if cap(z.Timestamps) >= int(zb0002) {
				z.Timestamps = (z.Timestamps)[:zb0002]
			} else {
				z.Timestamps = make([]int64, zb0002)
			}
			for za0001 := range z.Timestamps {
				z.Timestamps[za0001], bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Timestamps", za0001)
					return
				}
			}
		case "Values":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Values")
				return
			}
			if cap(z.Values) >= int(zb0003) {
				z.Values = (z.Values)[:zb0003]
			} else {
				z.Values = make([]float64, zb0003)
			}
			for za0002 := range z.Values {
				z.Values[za0002], bts, err = msgp.ReadFloat64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Values", za0002)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *NamedSeries) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 11 + msgp.ArrayHeaderSize + (len(z.Timestamps) * (msgp.Int64Size)) + 7 + msgp.ArrayHeaderSize + (len(z.Values) * (msgp.Float64Size))
	return
}
